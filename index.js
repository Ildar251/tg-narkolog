require('dotenv').config();
const { v4: uuidv4 } = require('uuid');
const connectToDatabase = require('./db');
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, session, InputFile } = require('grammy');
const { Router } = require("@grammyjs/router");

const bot = new Bot(process.env.BOT_API_KEY);

const router = new Router((ctx) => ctx.session.step);

const webAppUrlForm = 'https://munoucuchol.beget.app/';
const webAppUrlManager = 'https://munoucuchol.beget.app/manager';

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–æ –ø–æ–¥–∞—Ä–∫–∞
const ORDERS_FOR_GIFT = 5;

bot.use(session({ initial: () => ({ step: 'default', data: {} }) }));

bot.api.setMyCommands([
    { command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' },
]);

const startKeyboard = new Keyboard()
    .text('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤')
    .webApp('–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', webAppUrlForm).row()
    .text('–°–∫–∏–¥–∫–∏ –∑–∞ –¥—Ä—É–∑–µ–π')
    .resized();

    bot.command('start', async (ctx) => {
        const referralId = ctx.message.text.split(' ')[1];
        const db = await connectToDatabase();
        const collection = db.collection('users');
    
        if (referralId && referralId !== ctx.from.id.toString()) {
            const referrer = await collection.findOne({ telegramId: parseInt(referralId, 10) });
            const user = await collection.findOne({ telegramId: ctx.from.id });
    
            if (referrer && (!user || !user.referrerId)) {
                if (user) {
                    await collection.updateOne(
                        { telegramId: ctx.from.id },
                        { $set: { referrerId: referrer.telegramId } }
                    );
                } else {
                    await collection.insertOne({
                        telegramId: ctx.from.id,
                        referrerId: referrer.telegramId,
                        orders: [],
                        friends: [],
                    });
                }
            }
        }


    await ctx.reply(`üí•üí•üí•–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–êüí•üí•üí•
    –í—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
    - –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Å–∫–∏–¥–∫–∞ 15%
    - –ö–∞–∂–¥—ã–π –ø—è—Ç—ã–π –≤—ã–∑–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
    - –ö–∞–∂–¥—ã–π —à–µ—Å—Ç–æ–π –≤—ã–∑–æ–≤ —Å–∫–∏–¥–∫–∞ 15%
     
    –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –∫–∞–Ω–∞–ª–∞ - –º—ã —Å–æ–∑–¥–∞–ª–∏ –¥–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞—Ä–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥ –Ω–∞ –¥–æ–º
    - –ù–∞—Ä–∫–æ–ª–æ–≥ –Ω–∞ –¥–æ–º –ø—Ä–∏–µ–¥–µ—Ç –∫ –≤–∞–º –∑–∞ 40 –º–∏–Ω—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —á–∞—Ç –∏–ª–∏ –∂–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É 
    
    ‚òéÔ∏è 8 918 677-64-93
    üí¨ –ß–∞—Ç —Å –Ω–∞—Ä–∫–æ–ª–æ–≥–æ–º @telegramchatr
    
    –£—Å–ª–æ–≤–∏–µ - –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª –∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —á–∞—Ç —Å –∑–∞–∫–∞–∑–æ–º. –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–≤–æ–∏ —Å–∫–∏–¥–∫–∏ –∏ –±–æ–Ω—É—Å—ã.
    
    –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ - –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∑–∞–∫–∞–∂–µ—Ç —É –Ω–∞—Å —É—Å–ª—É–≥—É —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 25% —Å–∫–∏–¥–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ, –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
    
    üìå`, {
        reply_markup: startKeyboard
    });
});

bot.command('referral', async (ctx) => {
    const referralLink = `https://t.me/narkologKrasnodar_bot?start=${ctx.from.id}`;
    await ctx.reply(`–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${referralLink}`);
});

bot.command('manager', async (ctx) => {
    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏!', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏',
                web_app: { url: webAppUrlManager }
              }
            ]
          ]
        }
      });
});

bot.hears('–°–∫–∏–¥–∫–∏ –∑–∞ –¥—Ä—É–∑–µ–π', async (ctx) => {
    try {
        const db = await connectToDatabase();
        const collection = db.collection('users');
        const user = await collection.findOne({ telegramId: ctx.from.id });

        const referralLink = `https://t.me/narkologKrasnodar_bot?start=${ctx.from.id}`;
        const friendsCount = user && user.friends ? user.friends.length : 0;

        await ctx.reply(`–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${referralLink}\n\n–í—ã –ø—Ä–∏–≤–µ–ª–∏ –¥—Ä—É–∑–µ–π: ${friendsCount}`);
    } catch (error) {
        console.error('Error retrieving referral data:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.');
    }
})

bot.hears('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', async (ctx) => {
    try {
        const db = await connectToDatabase();
        const collection = db.collection('users');
        const user = await collection.findOne({ telegramId: ctx.from.id });

        if (!user || !user.orders || user.orders.length === 0) {
            await ctx.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.");
        } else {
            let ordersText = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n";
            user.orders.forEach((order, index) => {
                let statusSymbol;
                if (order.status === "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ") {
                    statusSymbol = 'üü°';
                } else if (order.status === "–û—Ç–º–µ–Ω–µ–Ω") {
                    statusSymbol = 'üî¥';
                } else {
                    statusSymbol = 'üü¢';
                }
                ordersText += `${index + 1}. –ó–∞–∫–∞–∑ ‚Ññ: ${order.orderId},\n    –°—Ç–∞—Ç—É—Å: ${statusSymbol} ${order.status}\n\n`;
            });
            const remainingOrders = ORDERS_FOR_GIFT - user.orders.filter(order => order.status === "–í—ã–ø–æ–ª–Ω–µ–Ω").length;
            if (remainingOrders > 0) {
                ordersText += `–ó–∞–∫–∞–∑–æ–≤ –¥–æ –ø–æ–¥–∞—Ä–∫–∞: ${remainingOrders}\n`;
            } else {
                ordersText += `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫!\n`;
            }

            await ctx.reply(ordersText);
        }
    } catch (error) {
        console.error('Error retrieving orders:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.');
    }
});

bot.on('message:web_app_data', async (ctx) => {
    try {
        const data = JSON.parse(ctx.message.web_app_data.data);
        const phone = data.phone;
        const address = data.address;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
        const orderId = uuidv4().substring(0, 8);
        const orderStatus = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ";

        const message = `
<b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:</b>
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${address}
üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> ${orderId}
üì¶ <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> ${orderStatus === '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ' ? 'üü° –í –æ–±—Ä–∞–±–æ—Ç–∫–µ' : orderStatus === '–û—Ç–º–µ–Ω–µ–Ω' ? 'üî¥ –û—Ç–º–µ–Ω–µ–Ω' : 'üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω'}
`;

        await ctx.reply(message, { parse_mode: 'HTML' });

        const db = await connectToDatabase();
        const collection = db.collection('users');

        const user = await collection.findOne({ telegramId: ctx.from.id });
        if (user) {
            await collection.updateOne(
                { telegramId: ctx.from.id },
                { $push: { orders: { orderId: orderId, status: orderStatus } } }
            );
        } else {
            const newUser = {
                telegramId: ctx.from.id,
                userName: ctx.from.username, 
                phone: phone,
                address: address,
                orders: [
                    { orderId: orderId, status: orderStatus }
                ],
                friends: [],
                referrerId: referrerId ? parseInt(referrerId, 10) : null // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            };
            await collection.insertOne(newUser);
        }
    } catch (error) {
        console.error('Error parsing web app data:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.');
    }
});

bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
        console.error("Could not contact Telegram:", e);
    } else {
        console.error("Unknown error:", e);
    }
});

bot.use(router);
bot.start();